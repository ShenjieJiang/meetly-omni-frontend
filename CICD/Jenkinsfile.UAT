pipeline {
    agent any
    tools {
        nodejs 'NodeJS' 
    }

    environment {
        // BITBUCKET_URL    = "${env.FE_BITBUCKET_URL}"            // From Jenkins global environment variable
        // BITBUCKET_BRANCH = "develop"                            // Change as needed - e.g. "main"
        // AWS_REGION       = "${env.AWS_REGION}"                  // Can hardcode or use Jenkins global environment variable
        // AWS_CREDENTIALS  = credentials('UAT_AWS_CREDENTIALS')   // From AWS credentials ID in Jenkins
        // S3_BUCKET        = "${env.UAT_S3_BUCKET}"               // Use Jenkins global environment variable
        // S3_WORKING_DIR   = "dist"                               // Change depending on build files
        // DISCORD_WEBHOOK  = "${env.FE_DISCORD_WEBHOOK}"          // From Jenkins global environment variable
    }

    stages {
        stage('Github Checkout') {
            steps {
                echo "Checkout to main branch."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [
                        [
                            url: 'https://github.com/ShenjieJiang/meetly-omni-frontend.git',
                            credentialsId: 'github-credentials-id' // 使用存储在 Jenkins 中的 GitHub 凭据
                        ]
                    ]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing dependencies..."
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                echo "Building..."
                sh 'node --version'
                sh 'npm run build'
            }
        }

        // stage('Deploy to AWS S3') {
        //     steps {
        //         echo "Deploy to AWS S3..."
        //         withAWS(region: env.AWS_REGION, credentials: env.AWS_ACCESS_KEY_ID) {
        //             s3Delete(bucket: env.S3_BUCKET, path: "")
        //             s3Upload(
        //                 bucket: env.S3_BUCKET,
        //                 includePathPattern: '**/*',
        //                 workingDir: "${WORKSPACE}"
                    // )
                // }
            // }
        }
    }

    post {
        success {
            script {
                def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                def commitAuthor = sh(script: "git log -1 --pretty=%an", returnStdout: true).trim()

                def description = """
                **Build Successful!**
                Project Repo: ${env.JOB_NAME}
                Build #: ${env.BUILD_NUMBER}
                Build URL: ${env.BUILD_URL}
                Commit Author: ${commitAuthor}
                Commit Message: ${commitMessage}
                """.stripIndent()

                sendDiscordNotification(description, 65280)
            }
        }

        failure {
            script {
                def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true)?.trim()
                def commitAuthor = sh(script: "git log -1 --pretty=%an", returnStdout: true)?.trim()

                if (commitMessage == null || commitAuthor == null) {
                    echo "Error: Unable to retrieve commit information."
                    return
                }

                def logFile = "build-${env.BUILD_NUMBER}-log.txt"
                try {
                    def buildLog = sh(script: "cat /var/lib/jenkins/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}/log", returnStdout: true).trim()
                    writeFile file: logFile, text: buildLog
                    echo "Build log saved to ${logFile}."
                } catch (Exception ex) {
                    echo "Error: Unable to retrieve build log."
                    return
                }

                def description = """
                **Build Failed!**
                Project Repo: ${env.JOB_NAME}
                Build #: ${env.BUILD_NUMBER}
                Build URL: ${env.BUILD_URL}
                Commit Author: ${commitAuthor}
                Commit Message: ${commitMessage}
                See Full build log attached below.
                """.stripIndent()

                sendDiscordNotification(description, 16711680)

                try {
                    sh """
                        curl -X POST \
                            -H "Content-Type: multipart/form-data" \
                            -F "payload_json={\\"username\\":\\"Jenkins Bot\\"}" \
                            -F "file=@${logFile}" \
                            ${env.DISCORD_WEBHOOK}
                    """
                } catch (Exception ex) {
                    echo "Error: Unable to send file to Discord."
                    return
                }

                sh "rm ${logFile}"
            }
        }
    }
}

// Function to send notification to Discord
def sendDiscordNotification(description, color) {
    def payload = [
        username: 'Jenkins Bot',
        embeds: [[
            description: description,
            color: color,
            footer: [
                text: "Jenkins Pipeline"
            ]
        ]]
    ]

    try {
        httpRequest(
            httpMode: 'POST',
            url: "${env.DISCORD_WEBHOOK}",
            contentType: 'APPLICATION_JSON',
            requestBody: groovy.json.JsonOutput.toJson(payload)
        )
    } catch (Exception ex) {
        echo "Error: Unable to send message to Discord."
    }
}
